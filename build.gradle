plugins {
    id "com.google.protobuf" version "0.8.10" // for GRPC
    id "java"
    id "war" // for REST
    id 'application'
}

group 'org.example'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'

    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    // GRPC Dependencies
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.10.0'

    // https://mvnrepository.com/artifact/io.grpc/grpc-all
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.25.0'
    
    implementation 'com.google.code.gson:gson:2.7'

    // REST Dependencies
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-core-asl
    implementation group: 'org.codehaus.jackson', name: 'jackson-core-asl', version: '1.9.2'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-jaxrs
    implementation group: 'org.codehaus.jackson', name: 'jackson-jaxrs', version: '1.9.2'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-mapper-asl
    implementation group: 'org.codehaus.jackson', name: 'jackson-mapper-asl', version: '1.9.2'
    // https://mvnrepository.com/artifact/org.codehaus.jackson/jackson-xc
    implementation group: 'org.codehaus.jackson', name: 'jackson-xc', version: '1.9.2'
    // https://mvnrepository.com/artifact/com.sun.jersey/jersey-client
    implementation group: 'com.sun.jersey', name: 'jersey-client', version: '1.19.1'
    // https://mvnrepository.com/artifact/com.sun.jersey/jersey-core
    implementation group: 'com.sun.jersey', name: 'jersey-core', version: '1.19.1'
    // https://mvnrepository.com/artifact/com.sun.jersey/jersey-json
    implementation group: 'com.sun.jersey', name: 'jersey-json', version: '1.19.1'
    // https://mvnrepository.com/artifact/com.sun.jersey/jersey-server
    implementation group: 'com.sun.jersey', name: 'jersey-server', version: '1.19.1'
    // https://mvnrepository.com/artifact/com.sun.jersey/jersey-servlet
    implementation group: 'com.sun.jersey', name: 'jersey-servlet', version: '1.19.1'
    // https://mvnrepository.com/artifact/org.codehaus.jettison/jettison
    implementation group: 'org.codehaus.jettison', name: 'jettison', version: '1.1'
    // https://mvnrepository.com/artifact/javax.ws.rs/jsr311-api
    implementation group: 'javax.ws.rs', name: 'jsr311-api', version: '1.1.1'
    // // https://mvnrepository.com/artifact/com.sun.jersey/jersey-server
    // compile group: 'com.sun.jersey', name: 'jersey-server', version: '1.2'

    implementation 'com.sun.jersey:jersey-client:1.19.1'

    // MQTT Dependencies
    // https://mvnrepository.com/artifact/org.eclipse.paho/org.eclipse.paho.client.mqttv3
    implementation group: 'org.eclipse.paho', name: 'org.eclipse.paho.client.mqttv3', version: '1.2.5'
}


// GRPC
sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
        proto {
            srcDirs = ['src/main/proto'] // directory containing your .proto files
        }
    }
}

protobuf {
    protoc {
        artifact = 'com.google.protobuf:protoc:3.10.1'
    }

    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.25.0'
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}


test {
    useJUnitPlatform()
}

task openTerminals {
    def projectPath = project.projectDir.getAbsolutePath()
    doLast {
        // ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project/build/classes/java/main && java adminserver.StartAdminServer"'].execute()
        // ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project/build/classes/java/main && java adminclient.AdminClient"'].execute()
        // ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project/build/classes/java/main && java robot.StartRobot"'].execute()
        // ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project/build/classes/java/main && java robot.StartRobot"'].execute()
        ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project && gradle -PmainClass=adminserver.StartAdminServer run"'].execute()
        ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project && gradle -PmainClass=adminclient.AdminClient run"'].execute()
        ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project && gradle -PmainClass=robot.StartRobot run"'].execute()
        ["osascript", "-e", 'tell application "Terminal" to do script "cd /Volumes/SSD/IdeaProjects/distributed-systems-project && gradle -PmainClass=robot.StartRobot run"'].execute()
    }
}

application {
    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : "NULL"
}

task execute(type:JavaExec) {
    main = project.hasProperty("mainClass") ? getProperty("mainClass") : "NULL"
    classpath = sourceSets.main.runtimeClasspath
}